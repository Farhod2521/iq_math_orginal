aiohappyeyeballs==2.4.4
aiohttp==3.11.11
aiosignal==1.3.2
annotated-types==0.7.0
anyio==4.8.0
asgiref==3.8.1
attrs==24.3.0
certifi==2024.12.14
cffi==1.17.1
charset-normalizer==3.4.1
colorama==0.4.6
distro==1.9.0
Django==5.1.4
django-ckeditor==6.7.2
django-cors-headers==4.6.0
django-filter==24.3
django-jazzmin==3.0.1
django-js-asset==3.0.1
django-modeltranslation==0.19.12
django-user-agents==0.4.0
djangorestframework==3.15.2
djangorestframework_simplejwt==5.4.0
drf-yasg==1.21.8
et_xmlfile==2.0.0
frozenlist==1.5.0
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
idna==3.10
inflection==0.5.1
jiter==0.8.2
multidict==6.1.0
mysqlclient==2.2.7
openai==0.28.0
openpyxl==3.1.5
outcome==1.3.0.post0
packaging==24.2
pillow==11.1.0
propcache==0.2.1
pyaes==1.6.1
pyasn1==0.6.1
pycparser==2.22
pydantic==2.10.5
pydantic_core==2.27.2
PyJWT==2.10.1
pymemcache==4.0.0
PySocks==1.7.1
python-dotenv==1.0.1
python-memcached==1.62
python-telegram-bot==21.10
pytz==2024.2
PyYAML==6.0.2
requests==2.32.3
rsa==4.9
selenium==4.27.1
sniffio==1.3.1
sortedcontainers==2.4.0
sqlparse==0.5.3
Telethon==1.38.1
tqdm==4.67.1
trio==0.28.0
trio-websocket==0.11.1
typing_extensions==4.12.2
tzdata==2024.2
ua-parser==1.0.1
ua-parser-builtins==0.18.0.post1
uritemplate==4.1.1
urllib3==2.3.0
user-agents==2.2.0
webdriver-manager==4.0.2
websocket-client==1.8.0
wsproto==1.2.0
yarl==1.18.3








class  Diagnost_Student(models.Model):
    student =  models.ForeignKey(Student, on_delete=models.CASCADE)
    result   = models.JSONField()

    def __str__(self):
        return str(self.student.full_name)



shu modelga   quydagi malumotlar yozilsin 

savolar quydagicha tushadi  ularni 
[
    {
        "id": 71,
        "question_text_uz": "<p>this is test</p>",
        "question_text_ru": null,
        "question_type": "text",
        "level": 1
    },
    {
        "id": 68,
        "question_text_uz": "O'zbekiston poytaxti qaysi?",
        "question_text_ru": null,
        "question_type": "choice",
        "level": 1,
        "choices": [
            {
                "id": 103,
                "letter": "A",
                "image": null,
                "text_uz": "Toshkent",
                "text_ru": null
            },
            {
                "id": 104,
                "letter": "B",
                "image": null,
                "text_uz": "Samarqand",
                "text_ru": null
            },
            {
                "id": 105,
                "letter": "C",
                "image": null,
                "text_uz": "Buxoro",
                "text_ru": null
            }
        ]
    },
    {
        "id": 57,
        "question_text_uz": "<p>O&#39;zbektiston poytaxti qayer ?</p>",
        "question_text_ru": "<p>O&#39;zbektiston poytaxti qayer ?</p>",
        "question_type": "choice",
        "level": 1,
        "choices": [
            {
                "id": 81,
                "letter": "A",
                "image": null,
                "text_uz": "Toshkent",
                "text_ru": "Toshkent"
            },
            {
                "id": 82,
                "letter": "B",
                "image": null,
                "text_uz": "Samarqand",
                "text_ru": "Samarqand"
            },
            {
                "id": 83,
                "letter": "C",
                "image": null,
                "text_uz": "Surxandaryo",
                "text_ru": "Surxandaryo"
            }
        ]
    },
    {
        "id": 70,
        "question_text_uz": "<p>Dunyoning poytaxti qayer</p>",
        "question_text_ru": null,
        "question_type": "choice",
        "level": 1,
        "choices": [
            {
                "id": 110,
                "letter": "A",
                "image": null,
                "text_uz": "Asaka",
                "text_ru": null
            },
            {
                "id": 111,
                "letter": "B",
                "image": null,
                "text_uz": "Toshkent",
                "text_ru": null
            },
            {
                "id": 112,
                "letter": "C",
                "image": null,
                "text_uz": "Andijon",
                "text_ru": null
            },
            {
                "id": 113,
                "letter": "D",
                "image": null,
                "text_uz": "Samarqand",
                "text_ru": null
            }
        ]
    },
    {
        "id": 64,
        "question_text_uz": "<p>Quyidagi savollarga javob bering:</p>",
        "question_text_ru": "",
        "question_type": "composite",
        "level": 1,
        "sub_questions": [
            {
                "id": 33,
                "text1": "Toshkentdan Samarqandgacha masofa?",
                "text2": null,
                "text1_uz": "Toshkentdan Samarqandgacha masofa?",
                "text1_ru": null,
                "text2_uz": null,
                "text2_ru": null
            },
            {
                "id": 34,
                "text1": "Toshkentdan Buxorogacha masofa?",
                "text2": null,
                "text1_uz": "Toshkentdan Buxorogacha masofa?",
                "text1_ru": null,
                "text2_uz": null,
                "text2_ru": null
            }
        ]
    }
]



chek qilish uchun esa 

{
  "text_answers": [
    {
      "question_id": 56,
      "answer": "Toshkent"
    }
  ],
  "choice_answers": [
    {
      "question_id": 57,
      "choices": [81]
    }
  ],
  "composite_answers": [
    {
      "question_id": 64,
      "answers": ["300km", "500km"]
    }
  ]
}


endi response quydagicha qaytadi

{
    "total_answers": 3,
    "correct_answers": 1,
    "score": 33.33333333333333
}

qiladigan ish qanaqa Diagnost_Student  student va json  yozib olish kerak 
jsonga quydagi malumotalrni yozish kerak 

{
    "question": [
            {
               "index": 1
               "question_id": 54,
               "question_uz": "sdasdlas", 
               "question_ru": "sdasdlas",
               "answer": True
            }
            {
               "index": 2
               "question_id": 54,
               "question_uz": "sdasdlas", 
               "question_ru": "sdasdlas",
               "answer": True
            }
            ......
        ]
    "Topic": [
        {
            "topic_name" : "ASDASDAS",
            "topic_name" : "ASDASDAS",
            "topic_name" : "ASDASDAS",
        }
    ]
    "result": [
        {
            "total_answers": 3,
            "correct_answers": 1,
            "score": 33.33333333333333
        }
    ]
}

shunday tarzda bazaga saqlanib qolishi kerak jsonga  bu yerda index bu savolarni ketmaketliq sanoq tartibi, quetion_uz/ru  
bu nomi savol, answer agar savol togir belgilagan bolsa true qoyish kerak aks xolda false,  Topic topic_name olib kelish kerak yani qaysi savolni xato qiladigan bolsa 
osha savol qaysi topic tegishli bolsa shui topicni nomini saqlash kerak faqat xato qilganlari Topic name

class Topic(models.Model):
    name = models.CharField(max_length=200, verbose_name="Mavzu nomi")
    chapter = models.ForeignKey(Chapter, on_delete=models.CASCADE, related_name="topics", verbose_name="Tegishli bob")
    video_url = models.URLField(blank=True, null=True, verbose_name="Mavzu videosi")
    content = RichTextField(verbose_name="Mavzu matni", blank=True, null=True)
    is_locked = models.BooleanField(default=True, verbose_name="Qulflangan")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "Mavzu"
        verbose_name_plural = "Mavzular"




from django.core.exceptions import ValidationError
class Question(models.Model):
    QUESTION_TYPES = [
        ('text', "Matnli javob"),
        ('choice', "Variant tanlash"),
        ('image_choice', "Rasmli variant"),
        ('composite', "Bir nechta inputli savol"),
    ]

    topic = models.ForeignKey("Topic", on_delete=models.CASCADE, related_name="questions")
    question_text = RichTextField()
    question_type = models.CharField(max_length=20, choices=QUESTION_TYPES)
    level = models.PositiveIntegerField()
    
    # Faqat text turi uchun
    correct_text_answer = models.TextField(blank=True, null=True)

    def __str__(self):
        return f"{self.question_text[:30]}..."
    def clean(self):
        if self.question_type == 'text' and not self.correct_text_answer:
            raise ValidationError("Matnli savollar uchun to‘g‘ri javob kiritilishi kerak.")
        if self.question_type in ['choice', 'image_choice'] and not self.pk:
            # Can't validate related objects until instance is saved
            return
        if self.question_type in ['choice', 'image_choice'] and not self.choices.exists():
            raise ValidationError("Variantli savollar uchun hech bo‘lmasa bitta variant bo‘lishi kerak.")
        if self.question_type == 'composite' and not self.sub_questions.exists():
            raise ValidationError("Bir nechta inputli savollar uchun kamida bitta kichik savol bo‘lishi kerak.")
    class Meta:
        verbose_name = "Savol"
        verbose_name_plural = "Savollar"


shu CheckAnswersAPIView  ozgartirib  natijalrni Diagnost_Student yozib ketadigan bolsin 

class CheckAnswersAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        serializer = CheckAnswersSerializer(data=request.data)

        if not serializer.is_valid():
            return Response({"message": "Noto‘g‘ri formatdagi ma'lumotlar."}, status=400)

        correct_answers = 0
        total_answers = 0

        # Check Text Answers
        if serializer.validated_data.get('text_answers'):
            text_answers = serializer.validated_data['text_answers']
            for answer in text_answers:
                total_answers += 1
                question = Question.objects.filter(id=answer['question_id'], question_type="text").first()
                if question:
                    if question.correct_text_answer == answer['answer']:
                        correct_answers += 1

        # Check Choice Answers
        if serializer.validated_data.get('choice_answers'):
            choice_answers = serializer.validated_data['choice_answers']
            for answer in choice_answers:
                total_answers += 1
                question = Question.objects.filter(id=answer['question_id'], question_type="choice").first()
                if question:
                    correct_choices = Choice.objects.filter(question=question, is_correct=True).values_list('id', flat=True)
                    if set(answer['choices']) == set(correct_choices):
                        correct_answers += 1

        # Check Composite Answers
        if serializer.validated_data.get('composite_answers'):
            composite_answers = serializer.validated_data['composite_answers']
            for answer in composite_answers:
                total_answers += 1
                question = Question.objects.filter(id=answer['question_id'], question_type="composite").first()
                if question:
                    correct_answers_count = 0
                    for sub_answer, sub_question in zip(answer['answers'], question.sub_questions.all()):
                        if sub_answer == sub_question.correct_answer:
                            correct_answers_count += 1
                    if correct_answers_count == question.sub_questions.count():
                        correct_answers += 1

        # Return the response with score
        return Response({
            "total_answers": total_answers,
            "correct_answers": correct_answers,
            "score": (correct_answers / total_answers) * 100 if total_answers > 0 else 0
        })